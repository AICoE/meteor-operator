apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: config
  labels:
    app: meteor-pipeline
spec:
  params:
    - name: image
      description: The output image is named as pipelineRun name.
  resources:
    inputs:
      - name: repo
        type: git
  results:
    - name: base-image
    - name: build-stratergy
    - name: dockerfile-path
    - name: build-source-script
    - name: registry
    - name: registry-org
    - name: registry-project
    - name: registry-secret
  steps:
    - name: gather-info
      image: quay.io/thoth-station/s2i-thoth-ubi8-py36:v0.14.3
      workingDir: /workspace/repo
      script: |
        if [[ ! -f .aicoe-ci.yaml ]]; then
          cat <<EOF > .aicoe-ci.yaml
          build:
            base-image: "quay.io/thoth-station/s2i-custom-py38-notebook:latest"
            build-stratergy: "Source"
            dockerfile-path: ""
            build-source-script: "image:///opt/app-root/builder"
            registry: "image-registry.openshift-image-registry.svc:5000"
            registry-org: "$(context.taskRun.namespace)"
            registry-project: "$(params.image)"
            registry-secret: "aicoe-pusher-secret"
        EOF
        fi
        echo -n "" > $(results.base-image.path)
        echo -n "" > $(results.build-stratergy.path)
        echo -n "" > $(results.dockerfile-path.path)
        echo -n "" > $(results.build-source-script.path)
        echo -n "" > $(results.registry.path)
        echo -n "" > $(results.registry-org.path)
        echo -n "" > $(results.registry-project.path)
        echo -n "" > $(results.registry-secret.path)

    - name: query-config
      image: quay.io/thoth-station/s2i-thoth-dev:latest
      workingDir: /workspace/repo
      script: |
        #!/opt/app-root/bin/python
        import os
        import json
        import yaml


        def parse_pipfile():
            from pipfile import Pipfile

            if not os.path.exists("Pipfile"):
                return "3.8"
            else:
                parsed = Pipfile.load(filename="Pipfile")
                python_version = (
                    parsed.data["_meta"].get("requires", {}).get("python_version", "")
                )
                if "elyra" in parsed.data["default"]:
                    python_version = python_version + "-elyra"
                return python_version


        image_list = {
            "3.6": "quay.io/thoth-station/s2i-custom-notebook:latest",
            "3.8": "quay.io/thoth-station/s2i-custom-py38-notebook:latest",
            "3.8-elyra": "quay.io/thoth-station/s2i-elyra-custom-notebook:latest",
        }

        with open(".aicoe-ci.yaml", "r") as stream:
            conf = yaml.safe_load(stream)

        for ele in conf.get("build", []):
            if isinstance(conf["build"].get(ele), str):
                output = open(f"/tekton/results/{ele}", "w+")
                if ele == "base-imge":
                    if "s2i-custom-py38-notebook" in conf["build"].get(ele) or not conf[
                        "build"
                    ].get(ele):
                        output.write(image_list.get(parse_pipfile()))
                elif ele == "registry-secret" and not conf["build"].get(ele):
                    output.write("thoth-station-thoth-pusher-secret")
                else:
                    output.write(conf["build"].get(ele))
                output.close()
            elif isinstance(conf["build"].get(ele), dict):
                output = open(f"/tekton/results/{ele}", "w+")
                json.dump(conf["build"].get(ele), output)
                output.close()
        print("done")
