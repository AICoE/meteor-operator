apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: jupyterbook-build
spec:
  params:
    - name: uid
      description: The uid of the meteor object.
    - name: image
      description: The output image is named as pipelineRun name.

    # buildah params
    - name: PATH_CONTEXT
      default: .
      description: The location of the path to run s2i from.
    - name: TLSVERIFY
      default: "false"
      description:
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
    - name: LOGLEVEL
      description: Log level when running the S2I binaryx`x
      default: "0"

  resources:
    inputs:
      - name: repo
        type: git
  steps:
    # create another step to generate config for jupyterbook
    - name: send-start-metrics
      image: quay.io/thoth-station/s2i-thoth-dev:latest
      env:
        - name: PROMETHEUS_PUSHGATEWAY_HOST
          valueFrom:
            configMapKeyRef:
              key: pushgateway
              name: meteor
      script: |
        #!/opt/app-root/bin/python
        import os
        from prometheus_client import CollectorRegistry, Counter, Gauge, push_to_gateway

        prometheus_registry = CollectorRegistry()
        _THOTH_METRICS_PUSHGATEWAY_URL = os.getenv("PROMETHEUS_PUSHGATEWAY_HOST")
        _METRIC_METEOR_BUILD_SUBMITTED = Counter(
            "jupyterbook_meteor_image_build_submitted",
            "Jupyterbook Meteor jupyterbook image submitted for build.",
            [],
            registry=prometheus_registry,
        )
        _METRIC_METEOR_BUILD_SUBMITTED.inc()
        if _THOTH_METRICS_PUSHGATEWAY_URL:
            try:
                print(
                    "Submitting metrics to Prometheus pushgateway %r",
                    _THOTH_METRICS_PUSHGATEWAY_URL,
                )
                push_to_gateway(
                    _THOTH_METRICS_PUSHGATEWAY_URL,
                    job="meteor-jb-pipeline",
                    registry=prometheus_registry,
                )
            except Exception as e:
                print(f"An error occurred pushing the metrics: {str(e)}")
        else:
            print("Not pushing metrics as Prometheus pushgateway was not provided")
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers

    - name: jupyter-book
      image: quay.io/thoth-station/s2i-jupyterbook:latest
      workingDir: /workspace/repo
      script: |
        start=`date +%s`

        jupyter-book build .
        mv _build/* docs/

        end=`date +%s`
        echo "$((end-start))" > jbuild_exe_time

    - name: generate-httpd-container-dockerfile
      image: quay.io/openshift-pipeline/s2i:nightly
      workingDir: /workspace/repo
      script: |
        /usr/local/bin/s2i build \
        $(params.PATH_CONTEXT)/docs \
        quay.io/centos7/httpd-24-centos7:latest \
        --as-dockerfile /gen-source/Containerfile
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source

    - name: build
      image: quay.io/buildah/stable
      workingDir: /gen-source
      securityContext:
        privileged: true
      script: |
        start=`date +%s`

        buildah bud \
        --storage-driver=overlay \
        --tls-verify=$(params.TLSVERIFY) \
        --layers \
        -f \
        /gen-source/Containerfile \
        -t \
        meteor-jb \
        .

        end=`date +%s`
        echo "$((end-start))" > build_exe_time
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source

    - name: push
      image: quay.io/buildah/stable
      script: |
        start=`date +%s`
        buildah tag meteor-jb image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.image):latest

        buildah push \
        --tls-verify=$(params.TLSVERIFY) \
        --authfile=/pushsecret/.dockerconfigjson \
        meteor-jb \
        image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.image):latest

        end=`date +%s`
        echo "$((end-start))" > image_push_exe_time
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: image-creds
          mountPath: /pushsecret/

    - name: send-end-metrics
      image: quay.io/thoth-station/s2i-thoth-dev:latest
      env:
        - name: PROMETHEUS_PUSHGATEWAY_HOST
          valueFrom:
            configMapKeyRef:
              key: pushgateway
              name: meteor
      script: |
        #!/opt/app-root/bin/python
        import os
        import time
        from prometheus_client import CollectorRegistry, Counter, Gauge, push_to_gateway

        prometheus_registry = CollectorRegistry()
        _THOTH_METRICS_PUSHGATEWAY_URL = os.getenv("PROMETHEUS_PUSHGATEWAY_HOST")
        _METRIC_JUPYTERBOOK_IMAGE_PUSHED = Counter(
            "jupyterbook_meteor_image_pushed",
            "Jupyterbook Meteor image pushed.",
            [],
            registry=prometheus_registry,
        )
        _METRIC_JUPYTERBOOK_BUILD_TIME = Gauge(
            "jupyterbook_meteor_build_time",
            "Jupyterbook Meteor build time.",
            ["image"],
            registry=prometheus_registry,
        )
        _METRIC_JUPYTERBOOK_IMAGE_BUILD_TIME = Gauge(
            "jupyterbook_meteor_image_build_time",
            "Jupyterbook Meteor image push time.",
            ["image"],
            registry=prometheus_registry,
        )
        _METRIC_JUPYTERBOOK_IMAGE_PUSH_TIME = Gauge(
            "jupyterbook_meteor_image_push_time",
            "Jupyterbook Meteor image push time.",
            ["image"],
            registry=prometheus_registry,
        )

        print("Start pushing image metrics")
        _METRIC_JUPYTERBOOK_IMAGE_PUSHED.inc()
        _METRIC_JUPYTERBOOK_BUILD_TIME.labels("$(params.image)").inc(
            float(open("/workspace/repo/jbuild_exe_time", "r").read().strip())
        )
        _METRIC_JUPYTERBOOK_IMAGE_BUILD_TIME.labels("$(params.image)").inc(
            float(open("/gen-source/build_exe_time", "r").read().strip())
        )
        _METRIC_JUPYTERBOOK_IMAGE_PUSH_TIME.labels("$(params.image)").inc(
            float(open("image_push_exe_time", "r").read().strip())
        )
        if _THOTH_METRICS_PUSHGATEWAY_URL:
            try:
                print(
                    "Submitting metrics to Prometheus pushgateway %r",
                    _THOTH_METRICS_PUSHGATEWAY_URL,
                )
                push_to_gateway(
                    _THOTH_METRICS_PUSHGATEWAY_URL,
                    job="meteor-pipeline",
                    registry=prometheus_registry,
                )
            except Exception as e:
                print(f"An error occurred pushing the metrics: {str(e)}")
        else:
            print("Not pushing metrics as Prometheus pushgateway was not provided")
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - mountPath: /gen-source
          name: gen-source

  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
    - name: image-creds
      secret:
        secretName: meteor-push
