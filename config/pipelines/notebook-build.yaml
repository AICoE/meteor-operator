apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: notebook-build
  labels:
    app: meteor-pipeline
spec:
  params:
    # tag params
    - name: url
      description: The git repository url.
    - name: image
      description: The output image is named as pipelineRun name.
    - name: base_image
      description: Base image to be used.
      default: "quay.io/thoth-station/s2i-custom-py38-notebook:latest"
    - name: build_stratergy
      description: stratergy with which image is to build.
      default: "Source"
    - name: dockerfile_path
      description: dockerfile path to be used for builds.
      default: ""
    - name: build_source_script
      description: Specify a URL for the assemble, assemble-runtime and run scripts
      default: "image:///opt/app-root/builder"
    - name: registry
      description: Container image registry.
      default: "image-registry.openshift-image-registry.svc:5000"
    - name: registry_org
      description: Name of the registry organization.
      default: "$(context.taskRun.namespace)"
    - name: registry_project
      description: Name of the project repository.
      default: "$(params.image)"
    - name: registry_secret
      description: Registry image push secret.
      default: "aicoe-pusher-secret"

    # buildah params
    - name: PATH_CONTEXT
      default: .
      description: The location of the path to run s2i from.
    - name: TLSVERIFY
      default: "false"
      description:
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
    - name: LOGLEVEL
      description: Log level when running the S2I binaryx`x
      default: "0"

    # s2i thoth params
    - name: UPGRADE_PIP_TO_LATEST
      description: Set this variable to have the 'pip' program and related python packages be upgraded.
      default: "1"
    - name: THOTH_ADVISE
      description: Advise the recommended stack by Thoth.
      default: "0"
    - name: THOTH_ERROR_FALLBACK
      description: Fallback to the lock file present in the repository if the submitted Thoth analysis fails.
      default: "1"
    - name: THOTH_DRY_RUN
      description: Submit stack to Thoth, but do not use the recommended one.
      default: "1"
    - name: "THAMOS_DEBUG"
      description: "Thamos enable debug mode."
      default: "0"
    - name: "THAMOS_VERBOSE"
      description: Run thamos in verbose mode.
      default: "1"
    - name: THOTH_PROVENANCE_CHECK
      description: Provenance check is verify the stack.
      default: "0"
    - name: THAMOS_NO_PROGRESSBAR
      description: Disable progressbar for thamos.
      default: "1"
  resources:
    inputs:
      - name: repo
        type: git

  steps:
    - name: send-start-metrics
      image: quay.io/thoth-station/s2i-thoth-dev:latest
      env:
        - name: PROMETHEUS_PUSHGATEWAY_HOST
          valueFrom:
            configMapKeyRef:
              key: pushgateway
              name: meteor
      script: |
        #!/opt/app-root/bin/python
        import os
        from prometheus_client import CollectorRegistry, Counter, Gauge, push_to_gateway

        prometheus_registry = CollectorRegistry()
        _THOTH_METRICS_PUSHGATEWAY_URL = os.getenv("PROMETHEUS_PUSHGATEWAY_HOST")
        _METRIC_METEOR_BUILD_SUBMITTED = Counter(
            "meteor_image_build_submitted",
            "Meteor image submitted for build.",
            [],
            registry=prometheus_registry,
        )
        _METRIC_METEOR_BUILD_SUBMITTED.inc()
        if _THOTH_METRICS_PUSHGATEWAY_URL:
            try:
                print(
                    "Submitting metrics to Prometheus pushgateway %r",
                    _THOTH_METRICS_PUSHGATEWAY_URL,
                )
                push_to_gateway(
                    _THOTH_METRICS_PUSHGATEWAY_URL,
                    job="meteor-pipeline",
                    registry=prometheus_registry,
                )
            except Exception as e:
                print(f"An error occurred pushing the metrics: {str(e)}")
        else:
            print("Not pushing metrics as Prometheus pushgateway was not provided")
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers

    - name: generate
      image: quay.io/openshift-pipeline/s2i:nightly
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      script: |
        REPONAME=$(basename $(params.url) .git)
        echo "$REPONAME" > repo_name.txt
        if [ "$(params.build_stratergy)" == "Dockerfile" ]; then
          if [ -z "$(params.dockerfile_path)" ]; then
            cp -rf . /gen-source/
            mv /gen-source/Dockerfile /gen-source/Containerfile
          else
            cp -rf . /gen-source/
            mv /gen-source/"$(params.dockerfile_path)" /gen-source/Containerfile
          fi
        else
          if [ -z "$(params.build_source_script)" ]; then
            /usr/local/bin/s2i build \
            $(params.PATH_CONTEXT) \
            $(params.base_image) \
            --env UPGRADE_PIP_TO_LATEST=$(params.UPGRADE_PIP_TO_LATEST) \
            --env IMAGE_NAME="$(params.registry)/$(params.registry_org)/$(params.registry_project)" \
            --env IMAGE_TAG="latest" \
            --env THAMOS_RUNTIME_ENVIRONMENT="" \
            --env THOTH_ADVISE=$(params.THOTH_ADVISE) \
            --env THOTH_ERROR_FALLBACK=$(params.THOTH_ERROR_FALLBACK) \
            --env THOTH_DRY_RUN=$(params.THOTH_DRY_RUN) \
            --env THAMOS_DEBUG=$(params.THAMOS_DEBUG) \
            --env THAMOS_VERBOSE=$(params.THAMOS_VERBOSE) \
            --env THOTH_PROVENANCE_CHECK=$(params.THOTH_PROVENANCE_CHECK) \
            --env GIT_REPO_NAME=$REPONAME \
            --env GIT_REPO_URL=$(params.url) \
            --loglevel=$(params.LOGLEVEL) \
            --as-dockerfile /gen-source/Containerfile
          else
            /usr/local/bin/s2i build \
            $(params.PATH_CONTEXT) \
            $(params.base_image) \
            --env UPGRADE_PIP_TO_LATEST=$(params.UPGRADE_PIP_TO_LATEST) \
            --env IMAGE_NAME="$(params.registry)/$(params.registry_org)/$(params.registry_project)" \
            --env IMAGE_TAG="latest" \
            --env THAMOS_RUNTIME_ENVIRONMENT="" \
            --env THOTH_ADVISE=$(params.THOTH_ADVISE) \
            --env THOTH_ERROR_FALLBACK=$(params.THOTH_ERROR_FALLBACK) \
            --env THOTH_DRY_RUN=$(params.THOTH_DRY_RUN) \
            --env THAMOS_DEBUG=$(params.THAMOS_DEBUG) \
            --env THAMOS_VERBOSE=$(params.THAMOS_VERBOSE) \
            --env THOTH_PROVENANCE_CHECK=$(params.THOTH_PROVENANCE_CHECK) \
            --env GIT_REPO_NAME=$REPONAME \
            --env GIT_REPO_URL=$(params.url) \
            --scripts-url=$(params.build_source_script) \
            --loglevel=$(params.LOGLEVEL) \
            --as-dockerfile /gen-source/Containerfile
          fi
        fi
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source

    - name: build
      image: quay.io/buildah/stable
      workingDir: /gen-source
      securityContext:
        privileged: true
      resources:
        limits:
          memory: "8Gi"
        requests:
          memory: "2Gi"
      script: |
        start=`date +%s`

        buildah bud \
        --storage-driver=overlay \
        --tls-verify=$(params.TLSVERIFY) \
        --layers \
        -f \
        /gen-source/Containerfile \
        -t \
        meteor-jh \
        .

        end=`date +%s`
        echo "$((end-start))" > build_exe_time
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source

    - name: push
      image: quay.io/buildah/stable
      script: |
        start=`date +%s`

        buildah tag meteor-jh image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.image):latest

        buildah push \
        --authfile=/pushsecret/.dockerconfigjson \
        --tls-verify=$(params.TLSVERIFY) \
        meteor-jh \
        image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.image):latest

        end=`date +%s`
        echo "$((end-start))" > image_push_exe_time
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: image-creds
          mountPath: /pushsecret/

    - name: send-for-image-analysis
      image: quay.io/thoth-station/s2i-thoth-dev:latest
      env:
        - name: MANAGEMENT_SECRET
          valueFrom:
            secretKeyRef:
              name: thoth
              key: management-api-token
        - name: PROMETHEUS_PUSHGATEWAY_HOST
          valueFrom:
            configMapKeyRef:
              key: pushgateway
              name: meteor
      script: |
        #!/opt/app-root/bin/python
        import requests
        import os
        import time
        from prometheus_client import CollectorRegistry, Counter, Gauge, push_to_gateway

        image_analysis_url = "https://khemenu.thoth-station.ninja/api/v1/analyze?"
        headers = {"Content-type": "application/json"}
        prometheus_registry = CollectorRegistry()
        _THOTH_METRICS_PUSHGATEWAY_URL = os.getenv("PROMETHEUS_PUSHGATEWAY_HOST")
        _METRIC_IMAGES_SUBMITTED = Counter(
            "meteor_image_analysis_submission",
            "Meteor image submitted for analysis.",
            [],
            registry=prometheus_registry,
        )
        _METRIC_IMAGE_PUSHED = Counter(
            "meteor_image_pushed",
            "Meteor image pushed.",
            ["image"],
            registry=prometheus_registry,
        )
        _METRIC_IMAGE_PUSH_TIME = Gauge(
            "meteor_image_push_time",
            "Meteor image push time.",
            ["image"],
            registry=prometheus_registry,
        )

        if any(
            img in "$(params.base_image)"
            for img in ["s2i-custom", "s2i-minimal", "s2i-generic", "s2i-thoth"]
        ):
            print("Push Step is completed.")

            try:
                print("Start pushing image push metrics")
                _METRIC_IMAGE_PUSH_TIME.labels("$(params.image)").inc(
                    float(open("image_push_exe_time", "r").read().strip())
                )
                _METRIC_IMAGE_PUSHED.labels("$(params.image)").inc()
            except Exception as e:
                print(f"An error occurred creating the build metrics: {str(e)}")

            image_analysis_params = {
                "secret": os.getenv("MANAGEMENT_SECRET"),
                "image": "$(params.registry)/$(params.registry_org)/$(params.registry_project):latest",
                "environment_type": "runtime",
                "verify_tls": True,
            }
            headers = {"Content-type": "application/json"}
            image_analysis_response = requests.post(
                image_analysis_url, headers=headers, params=image_analysis_params
            )
            if image_analysis_response.status_code == 202:
                _METRIC_IMAGES_SUBMITTED.inc()
                print("Successfully submitted for image analysis.")
            else:
                print("Submit attempt for image analysis has Failed.")
                print("Reason:{}".format(image_analysis_response.text))

            if _THOTH_METRICS_PUSHGATEWAY_URL:
                try:
                    print(
                        "Submitting metrics to Prometheus pushgateway %r",
                        _THOTH_METRICS_PUSHGATEWAY_URL,
                    )
                    push_to_gateway(
                        _THOTH_METRICS_PUSHGATEWAY_URL,
                        job="meteor-pipeline",
                        registry=prometheus_registry,
                    )
                except Exception as e:
                    print(f"An error occurred pushing the metrics: {str(e)}")
            else:
                print("Not pushing metrics as Prometheus pushgateway was not provided")
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers

  sidecars:
    - name: send-for-build-analysis
      image: quay.io/thoth-station/s2i-thoth-dev:latest
      env:
        - name: image
          value: $(params.image)
        - name: base_image
          value: $(params.base_image)
        - name: registry
          value: $(params.registry)
        - name: registry_org
          value: $(params.registry_org)
        - name: registry_project
          value: $(params.registry_project)
        - name: namespace
          value: $(context.taskRun.namespace)
        - name: PROMETHEUS_PUSHGATEWAY_HOST
          valueFrom:
            configMapKeyRef:
              key: pushgateway
              name: meteor
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
      script: |
        #!/opt/app-root/bin/python
        import requests
        import os
        import time
        import json
        from thoth.common import OpenShift
        from prometheus_client import CollectorRegistry, Counter, Gauge, push_to_gateway

        prometheus_registry = CollectorRegistry()
        _THOTH_METRICS_PUSHGATEWAY_URL = os.getenv("PROMETHEUS_PUSHGATEWAY_HOST")
        _METRIC_BUILDLOG_SUBMITTED = Counter(
            "meteor_image_build_log_submission",
            "Meteor image build submitted for log analysis.",
            [],
            registry=prometheus_registry,
        )
        _METRIC_BUILD_COMPLETED = Counter(
            "meteor_image_build_completion",
            "Meteor image build completed.",
            ["image"],
            registry=prometheus_registry,
        )
        _METRIC_BUILD_TIME = Gauge(
            "meteor_image_build_time",
            "Meteor image build time.",
            ["image"],
            registry=prometheus_registry,
        )
        openshift = OpenShift()
        url_host = openshift.openshift_api_url
        url_token = openshift.token
        pod_id = os.getenv("HOSTNAME")
        namespace = os.getenv("namespace")
        build_analysis_url = "https://khemenu.thoth-station.ninja/api/v1/build-analysis"
        headers = {"Content-type": "application/json"}
        log = ""
        build_params = {"container": "step-build"}
        required_cont = {"state": "running"}
        status_endpoint = "{}/api/v1/namespaces/{}/pods/{}".format(url_host, namespace, pod_id)

        while "running" in required_cont["state"]:
            print("Waiting for container step-build, It is still running...")
            time.sleep(30)
            status_response = requests.get(
                status_endpoint,
                headers={
                    "Authorization": "Bearer {}".format(url_token),
                    "Content-Type": "application/json",
                },
                verify=False,
                params=build_params,
            )
            status_response = status_response.json()
            if "containerStatuses" in status_response["status"]:
                for cont in status_response["status"]["containerStatuses"]:
                    if cont["name"] == "step-build":
                        required_cont = cont
                        break
            else:
                # logs cant be retrived
                required_cont = {"state": "failed"}

        if "terminated" in required_cont["state"]:
            time.sleep(30)
            print("Build Step is completed.")
            try:
                _METRIC_BUILD_TIME.labels(os.getenv("image")).inc(
                    float(open("/gen-source/build_exe_time", "r").read().strip())
                )
                _METRIC_BUILD_COMPLETED.labels(os.getenv("image")).inc()
            except Exception as e:
                print(f"An error occurred creating the build metrics: {str(e)}")
            log_endpoint = "{}/api/v1/namespaces/{}/pods/{}/log".format(
                url_host, namespace, pod_id
            )
            log_response = requests.get(
                log_endpoint,
                headers={
                    "Authorization": "Bearer {}".format(url_token),
                    "Content-Type": "application/json",
                },
                verify=False,
                params=build_params,
            )
            log = log_response.text

            build_analysis = {
                "base_image": os.getenv("base_image"),
                "build_log": {
                    "apiversion": "",
                    "kind": '"BuildLog"\n',
                    "log": json.dumps(log),
                    "metadata": "string",
                },
                "output_image": "{}/{}/{}:{}".format(
                    os.getenv("registry"),
                    os.getenv("registry_org"),
                    os.getenv("registry_project"),
                    "latest",
                ),
            }
            build_analysis_response = requests.post(
                build_analysis_url, headers=headers, data=json.dumps(build_analysis)
            )
            if build_analysis_response.status_code == 202:
                print("Successfully submitted for build analysis.")
                _METRIC_BUILDLOG_SUBMITTED.inc()
            else:
                print("Submit attempt for build analysis has Failed.")
                print("Reason:{}".format(build_analysis_response.text))
        else:
            print("Failed to submit for build analysis.")
            print("Status Response:", status_response)

        if _THOTH_METRICS_PUSHGATEWAY_URL:
            try:
                print(
                    "Submitting metrics to Prometheus pushgateway %r",
                    _THOTH_METRICS_PUSHGATEWAY_URL,
                )
                push_to_gateway(
                    _THOTH_METRICS_PUSHGATEWAY_URL,
                    job="meteor-pipeline",
                    registry=prometheus_registry,
                )
            except Exception as e:
                print(f"An error occurred pushing the metrics: {str(e)}")
        else:
            print("Not pushing metrics as Prometheus pushgateway was not provided")


  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
    - name: image-creds
      secret:
        secretName: meteor-push
